/*
Jesus Galvan jg42437
Juan P. Mata jpm2873
*/

DESIGN


HEADER

For our packet header we included: packet id , and file length.
This header is placed before the data in the following format:
'packet_id|len-' we used '|' and '-' as delimiters. Using the packet id 
we could easily keep track of what packets we have already recieved.
This makes Ording the packets very easy. Using the length field we 
know how much space is needed to fill the buffer.

We chose to implement it this way because this was the simplest way we 
could think of for keeping track of packets and assuring everything
is in order. We would keep track of what packet we were expecting and
if it didn't come there would be a timeout and the packet would be resent.
We used the ACKs from the server to send the file. We did not wait 
until we had the whole file because we thought using the ACKs was a much
more effcient.

FUNCTIONS

getPacketID(char p[])

This function takes the packet and retrieves the packet ID.
Return: packet ID

getFileLenPacket(char p[])

This function takes the packet and retrieves the length field.
Return: length

getPacketData(char p[])

This function takes the packet and retrieves the data(actial content).
Return: data

alarmhand(int signal)
This is the handler for our alarm. We use an alarm for our packet
timeouts, in the handler we keep a couonter of how many times we
have timed out for a particular packet. In the handler we resend the
packet, and reset the alarm. If there are more than 20 timeouts
we assume that the connection is lost.

*****CITE*******
is_valid_ip(char *ip_str)

valid_digit(char *ip_str)

These methods are for checking for a valid IP Address. We had to make 
some changes so it works with our code. The code was taken from geeksforgeeks.org.
Return: 0 if not valid IP

TEST

For testing with lost packets we just didn't send some packets and 
when the packets weren't received there would be a timeout and the 
packet would be resent. We also called sleep on the server side to simulate 
lost acks.